Генератор ковров. Формирует двумерный массив чисел на основе начального одномерного массива. Одномерный массив задается пользователем с помощью генератора случайных чисел "random", цифрами из числа Пи, или вручную (этой функции здесь пока еще нет). Ну и вся фишка в том, что на основе первого ряда чисел по специальному "волшебному алгоритму" формируется второй ряд, на основе второго ряда следующий и так далее. В итоге каждый ряд предопрделяет все следущие ряды, сколько бы их не было. И таким образом появляется двумерный массив чисел.

В этом генераторе ковров этот массив изображен графически: каждое число это пиксель, в зависимости от величины числа этому пикселю придается цвет. Например, нули окрашены в черный цвет, а единицы и всё что больше в зеленый. Я добавил еще несколько цветовых уровней, чтобы ковер получился многоцветным. Здесь числа окрашиваются группами, уровнями, по возрастанию. Например, от 1 до 2 - зеленый, от 2 до 4 - желтый, от 4 до 8 - другой цвет и так далее. Здесь вы видите, что напротив каждого цвета одно число. Это число определяет начало цветового уровня, все числа начиная с этого числа окрашиваются в определенный цвет. Начало следующего цветового уровня - это граница предыдущего, и так далее. Как бы уровни последовательно накладываются друг на друга. Граница последнего цветового уровня определяется максимальным числом в массиве. Благодаря такому способу окрашивания, вы видите эти причудливые формы, хаотичную структуру из треугольников, и фракталы Серпинского.
Выбрав форму Original, вы видите этот самый двумерный массив без прикрас. Остальные формы, это лишь способы отражения одного и того-же массива, что-то типа калейдоскопа.

"Волшебный алгоритм" который формирует ряды, родился у меня спонтанно, несколько лет назад на бумаге. В нём простая арифметика. Так выглядит "ковер" (в данном случае шириной 5 пикселей) в виде чисел:

2 3 5 1 6
1 2 4 5 4
1 2 1 1 3
1 1 0 2 4
0 1 2 2 3
1 1 0 1 3
0 1 1 2 2
1 0 1 0 2
1 1 1 2 1
0 0 1 1 0
0 1 0 1 0
1 1 1 1 0
0 0 0 1 1
0 0 1 0 1
...

Первый ряд, например, сформирован человеком, от балды :) 2 3 5 1 6 это начало и основа всего этого массива.
Во втором ряду первое число - это разница первого и второго числа из первого ряда, разница по модулю (или просто от большего отнимаем меньшее). Второе число - разница второго и третьего числа из верхнего ряда. Следущее число - разница третьего и четвертого, и так далее. Последнее число во втором ряду - разница последнего и первого чисел из верхнего ряда.
Следующий ряд формируется так же, на основе второго ряда. И так можно продолжать до бесконечности.


Немного о циклах.
Здесь мы видим, что числа постепенно уменьшаются до нулей и единиц. Если продолжать ряды бесконечно, мы увидим один и тот же набор нулей и единиц, который повторяется. Как бы такой цикл. В данном случае, если у нас массив шириной 5 чисел, то у него будет цикл из 15 рядов. У массива из 3х чисел цикл из 3х рядов. Это выглядит так:

5 2 1
3 1 2
2 1 1
1 0 1
1 1 0
0 1 1
1 0 1
1 1 0
0 1 1
1 0 1
1 1 0
...

Тоесть, цикл у 3n массива всегда такой:

0 1 1
1 0 1
1 1 0

У 5n массива почему-то 15ричный цикл, я не знаю в чём прикол.
У 3n, 6n, 7n - размеры циклов (колличество рядов) равны ширине массива. Но у каждого свои нюансы. У 6n и 7n существует еще несколько разных наборов нулей и единиц, у 3n всего один.

4n и 8n массивы конечны. Обычно массив заканчивается единицами и дальше идут нули. Но эти массивы так-же имеют множество конечных наборов. У 4n - 8 наборов. У 8n я обнаружил 125 наборов.

У 9n размер цикла 63 ряда! 10n почему-то имеет цикл из 30 рядов. Помимо этого они имеют множество различных наборов. Я пока изучил массивы до 10n. Занимался этим в Экселе. Большие массивы ставновится труднее изучать, так как нужно изучить и обрабоать большой обьем данных. Эксель уже не подходит. 
И я решил изучить Javascript. Пока-что я остановился на этом графическом представлении в виде Генератора ковров, как-бы больше увлекся графикой, нежели изученим этих циклов.

На основе данных что я получил, уже имеем такое представление:
Не все ковры бесконечны.
Бесконечные имеют циклы, 

==============================================================================================================

<div class="view-source"><a href="#"><p class = "inf_lang">RUS</p></a>
			<div id="advanced_info" class="hide">
				<b>Width,Height:</b><br>
				Ширина и высота в пикселях.
				Для форм Mirrors, Mirrors2 и Original можно устанавливать разную ширину и высоту. Для остальных форм желательно чтобы W и H были одинаковы, иначе можете лицезреть некоторые прикольные баги или разрывы.<br>
				<br>
				<b>Angle:</b><br>
				Параметр, который сокращает прямоугольный массив до трапеции или треугольника. Рекомендую использовать числа с точкой (например 0.5, 0.751, 0.001 и т.д.), а так же 0 или 1. Выше единицы наблюдаются разрывы.<br>
				Этот параметр не влияет на Mirrors, Mirrors2, Mirror45 и Original.<br>
				<br>
				Ковер состоит из нескольких одинаковых массивов (кусков), кроме формы Original. И с помощью параметра Angle можно изменять форму этого массива.<br>
				<br>
				<b>| random |</b><br>
				Формирует ковёр на основе массива из случайных чисел. Каждый раз создается новый массив. Для этой функции имеются следующие параметры:<br>
				<br>
				<b>min,max:</b>диапазон для случайных чисел.<br>
				<br>
				<b>strangeness:</b><br>
				Эта штука делит каждое число массива на указанную величину. По умолчанию 10. Можете использовать любые числа. Если значение выше или меньше 10, то ковер будет формироваться на основе чисел с точкой. Например, попробуйте значения 8 или 9, и посмотрите что будет.<br>
				п.с. генератор случайных чисел работал с каким-то багом, пришлось поставить этот делитель на 10. Позднее это оказалось красивой фишкой для ковров.<br>
				<br>
				<b>| digits of Pi |</b><br>
				Формирует ковер на основе постоянного массива цифр из числа Пи. Зависит от ширины ковра (Width).<br>
				Например, если ширина 720, для формы Original будут переданы первые 720 знаков числа Пи. Для остальных форм массив получится в два или несколько раз меньше.<br>
				Параметр <b>d</b> увеличивает каждое число массива в степень.
				<br>
				<b>| custom massive |</b>
				Формирует ковер на основе массива, который задается вручную. Пользователь указывает номер элемента массива <b>Element number</b>, и указывает для него значение <b>Value</b>. Затем нажимает <b>set</b>, и значение заносится в определенное место массива. Можно задать несколько значений в разные места массива, потом нажимаем <b>generate</b> и видим результат.<br>
				<br>
				По умолчанию для <b>custom massive</b> массив заполнен нулями. Но если до этого вы использовали одну из функций выше, то массив будет заполнен значениями которые использовались в прошлый раз. Если хотите обнулить массив, перезагрузите страницу.<br>
				<br>
				Если массив заполнен только чётными числами (2,4,6,...) и нулями, ковра не будет видно. Нужно как минимум одно нечётное число (1,3,5,...).<br>
				<br>
				Нумерация элементов начинается с 0 и заканчивается номером, который показан справа от Element # в скобках. Если последний номер не показан, просто нажмите set и generate.



			</div>

		</div>

		<div class="view-source"><a href="#"><p class = "inf_lang">ENG</p></a>
			<div id="advanced_info" class="hide">
				<b>Width,Height:</b><br>
				The width and height in pixels.
				For forms Mirrors, Mirrors2 and Original you can set different width and height. For other forms, it is desirable that the W and H are the same, otherwise you can see some funny bugs or breaks in carpet :)<br>
				<br>
				<b>Angle:</b><br>
				Parameter, which cuts a rectangular pixel array to a trapezoid or triangle. I recommend use numbers with dot (0.5, 0.751, 0.001, and so on), as well as 0 or 1. If this more then 1, you see breaks in carpet. <br>
				This option does not affect to the Mirrors, Mirrors2, Mirror45 and Original.<br>
				<br>
				The carpet consists of several identical arrays (pieces), except the form Original. And using the Angle option, you can change shape of this array.<br>
				<br>
				<b>| random |</b><br>
				It forms a carpet on the basis of an array of random numbers. 
				Each time a new array is created. This function has the following parameters:<br>
				<br>
				<b>min,max:</b>range of random numbers.<br>
				<br>
				<b>strangeness:</b><br>
				This thing divide each number of massive on specified value. Default value is 10. You can use any number. If the value is greater than or less than 10, the carpet will be formed on numbers with dot. For example, try a value of 8 or 9, press "random" and see what happens.<br>
				The random number generator has worked with some bug, I had to put the divider at 10. Later, it became a beautiful thing for carpets.<br>
				<br>
				<b>| digits of Pi |</b><br>
				It forms a carpet on the basis of an constant array of numbers of Pi. It depends on the Width.<br>
				For example, if the width 720, first 720 digits of Pi will be transferred to form Original. For other forms array happens in two or more times less. <br>
				<b>d</b> parameter increases each number of array to a degree. If this parameter is 1, there are original digits of Pi.

			</div>

		</div>